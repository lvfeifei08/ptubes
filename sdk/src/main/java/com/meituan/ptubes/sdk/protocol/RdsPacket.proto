syntax = "proto3";
package com.meituan.ptubes.sdk.protocol;

option java_package = "com.meituan.ptubes.sdk.protocol";
option java_outer_classname = "RdsPacket";
option optimize_for = SPEED;

enum MessageType {
  MESSAGETYPECOMPATIBLEPROTO2 = 0;
  PARTITIONEDMESSAGE = 1;
  MESSAGE = 2;
  ERROR = 3;
}

enum EventType {
  EVENTYPECOMPATIBLEPROTO2 = 0;
  INSERT = 1;
  UPDATE = 2;
  DELETE = 3;
  CREATE = 4;
  ALTER = 5;
  ERASE = 6;
  QUERY = 7;
  TRUNCATE = 8;
  RENAME = 9;
  /**CREATE INDEX**/
  CINDEX = 10;
  DINDEX = 11;
  GTID = 12;
  /** XA **/
  XACOMMIT = 13;
  XAROLLBACK = 14;
  /** TRANSACTION MARK **/
  TRANSACTIONBEGIN = 15;
  TRANSACTIONEND = 16;
  /** HEARTBEAT **/
  HEARTBEAT = 17;
}

/**Database type**/
enum SourceType {
  SOURCETYPECOMPATIBLEPROTO2 = 0;
  MYSQL = 1;
}

enum PositionType {
  POSITIONTYPECOMPATIBLEPROTO2 = 0;
  GTIDOFFSET = 1;
  BINLOGOFFSET = 2;
  TIMESTAMP = 3;
}

message RdsEnvelope {

  /**Protocol version number**/ //[default = 1]
  oneof version_present {
    int32 version = 1;
  }

  ///**Return data by shard or all data**/ [default = PARTITIONEDMESSAGE]
  oneof message_type_present {
    MessageType messageType = 2;
  }

  /**Store specific data, which is deserialized into different objects according to MessageType**/
  bytes message = 3;

  ///**Error code**/ [default = 0]
  oneof error_code_present {
    int32 error_code = 4;
  }

  /**Store error log**/
  string error_message = 5;

  /**Total number of messages**/
  int64 totalEventCount = 6;

  /**Reserved extension**/
  repeated Pair props = 7;

  Checkpoint latestCheckpoint = 8;
}


message RdsPartitionedMessage {

  /**key is the shard id, value is the message requested by this shard**/
  map<int32, RdsMessage> partitionMessages = 1;

  /**Reserved extension**/
  repeated Pair props = 2;
}


message RdsMessage {

  /**Number of messages**/
  int32 messageCount = 1;

  /**Message size, in Bytes**/
  int64 messageSize = 2;

  /**Message list**/
  repeated bytes messages = 3;

  /**Reserved extension**/
  repeated Pair props = 4;
}


message RdsEvent {

  /**Protocol header information**/
  RdsHeader header = 1;

  /** Identifies whether it is a ddl statement **/ // [default = false]
  oneof isDdl_present {
    bool isDdl = 2;
  }

  /**Data change type**/ // [default = UPDATE]
  oneof event_type_present {
    EventType eventType = 3;
  }

  /** One line of database changes **/
  RowData rowData = 4;

  /**Reserved extension**/
  repeated Pair props = 5;

  /** The schemaName of ddl/query, there will be cross-database ddl, you need to keep the current schemaName of the ddl execution **/
  string ddlSchemaName = 6;

  /** sql statement of ddl/query **/
  string sql = 7;

  /** comment information in sql **/
  string comment = 8;
}


/**message Header**/
message RdsHeader {

  /**Protocol version number**/ //[default = 1]
  oneof version_present {
    int32 version = 1;
  }

  /**The unique location of each event**/
  Checkpoint checkpoint = 2;

  /**Change data encoding**/
  string encode = 3;

  /**Change data execution time **/
  int64 executeTime = 4;

  ///**Data Source**/[default=MYSQL]
  oneof source_type_present {
    SourceType sourceType = 5;
  }

  /**Change data tablename**/
  string tableName = 6;

  /**tableId, generated by the database**/
  int64 tableId = 7;

  /**Change the sharding field of the data**/
  string partitionKey = 8;

  /**Reserved extension**/
  repeated Pair props = 9;

  /**Change the primary key field of the data**/
  string primaryKey = 10;
}


message RowData {

  /** Field information, incremental data (before modification, before deletion) **/
  map<string, Column> beforeColumns = 1;

  /** Field information, incremental data (after modification, after adding) **/
  map<string, Column> afterColumns = 2;

  /**Reserved extension**/
  repeated Pair props = 3;
}

/**Data structure for each field**/
message Column {
  /**Field subscript**/
  int32 index = 1;

  /**The type in the field java**/
  int32 sqlType = 2;

  /** Field name (ignoring case), which is not available in mysql**/
  string name = 3;

  /**Is it the primary key**/
  bool isKey = 4;

  /**If EventType=UPDATE, used to identify whether this field value has been modified**/
  bool updated = 5;

  /** Whether the flag is empty **/ //[default = false]
  oneof isNull_present {
    bool isNull = 6;
  }

  /**Reserved extension**/
  repeated Pair props = 7;

  /** Field value, timestamp, Datetime is a text in time format **/
  string value = 8;

  /** Corresponding to the original length of the data object **/
  int32 length = 9;

  /**Field mysql type**/
  string mysqlType = 10;
}

/**Reserved extension**/
message Pair {

  string key = 1;

  string value = 2;
}

/**binlog storage point data structure**/
message Checkpoint {

  /**The uuid of the gtid of the current transaction**/
  string uuid = 1;

  /**transactionId of the gtid of the current transaction**/
  int64 transactionId = 2;

  /**The index of the current event in the transaction**/
  int64 eventIndex = 3;

  /**Server ID**/
  int32 serverId = 4;

  /**Number of binlog files from the library**/
  int32 binlogFile = 5;

  /**binlog internal transaction offset**/
  int64 binlogOffset = 6;

  /**Transaction time stamp**/
  int64 timestamp = 7;

  ///**Data source**/[default = BINLOGOFFSET]
  oneof position_type_present {
    PositionType positionType = 8;
  }

  int64 versionTs = 9;
}
